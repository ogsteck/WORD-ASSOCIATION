# -*- coding: utf-8 -*-
"""496 FINAL PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15XP7Z68McrElCGjAX1zzrT93I48j9vVr
"""

from collections import defaultdict
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import os

glove_folder = '/content/drive/MyDrive/GLOVE VECTORS/'
fa_folder = '/content/drive/MyDrive/FREE ASSOCIATION/'
print("GloVe files:", os.listdir(glove_folder))
print("Free Association files:", os.listdir(fa_folder))

def load_glove(folder_path):
    glove = {}
    for filename in os.listdir(folder_path):
        path = os.path.join(folder_path, filename)
        with open(path, 'r', encoding='utf-8') as file:
            for line in file:
                parts = line.strip().split()
                word = parts[0]
                vector = np.array(parts[1:], dtype=float)
                glove[word] = vector
    return glove

glove = load_glove(glove_folder)

def load_fa(folder_path):
    fa = {}
    for filename in os.listdir(folder_path):
        path = os.path.join(folder_path, filename)
        df = pd.read_html(path, encoding='latin1')[0]  # <- add encoding here
        for i, row in df.iterrows():
            cue, target, fsg = row[0], row[1], row[5]
            if isinstance(fsg, (int, float)):
                fa[(cue.lower(), target.lower())] = fsg
    return fa

def guessing_game():
    relativity_guesses = {}
    associativity_guesses = {}

    for (cue, target), fsg in free_association.items():
        if cue not in glove or target not in glove:
            continue

        cue_vec = glove[cue]
        relativity_scores = {w: np.dot(cue_vec, glove[w]) for w in glove if w != cue}
        sorted_relativity = sorted(relativity_scores.items(), key=lambda x: -x[1])

        guesses = 0
        for w, _ in sorted_relativity:
            guesses += 1
            if w == target:
                break
        relativity_guesses[(cue, target)] = guesses
        associativity_scores = {w: free_association.get((cue, w), 0.0) for w in glove if w != cue}
        sorted_associativity = sorted(associativity_scores.items(), key=lambda x: -x[1])

        guesses = 0
        for w, _ in sorted_associativity:
            guesses += 1
            if w == target:
                break
        associativity_guesses[(cue, target)] = guesses

        print(f'Cue: "{cue}" | Target: "{target}" | Relativity Guesses: {relativity_guesses[(cue, target)]} | Associativity Guesses: {associativity_guesses[(cue, target)]}')

    return relativity_guesses, associativity_guesses

relativity_results, associativity_results = guessing_game()

